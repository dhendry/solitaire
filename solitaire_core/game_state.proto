syntax = "proto3";


package solitaire.solitaire_core;

enum Suit {
    UNKNOWN_SUIT = 0;
    CLUBS = 1;
    DIAMONDS = 2;
    HEARTS = 3;
    SPADES = 4;
}

enum CardRank {
    UNKNOWN_RANK = 0;
    ACE = 1;
    TWO = 2;
    THREE = 3;
    FOUR = 4;
    FIVE = 5;
    SIX = 6;
    SEVEN = 7;
    EIGHT = 8;
    NINE = 9;
    TEN = 10;
    JACK = 11;
    QUEEN = 12;
    KING = 13;
}

message Card {
    Suit suit = 1;
    CardRank rank = 2;
}

message VisibleGameState {
    // Bitmasks by card and suit num:
    uint64 talon = 1;

    // Bitmasks by rank idx:
    // Note that even though we could use rank index masks here that just complicates things a bunch
//    uint64 suit_stack_clubs = 2;
//    uint64 suit_stack_diamonds = 3;
//    uint64 suit_stack_hearts = 4;
//    uint64 suit_stack_spades = 5;
    uint64 suit_stack = 2;

    repeated uint64 build_stacks = 3; // Maximum length 7
    repeated uint32 build_stacks_num_hidden = 4; // Maximum length 7
//    fixed64 build_stack_0 = 6;
//    fixed64 build_stack_1 = 7;
//    fixed64 build_stack_2 = 8;
//    fixed64 build_stack_3 = 9;
//    fixed64 build_stack_4 = 10;
//    fixed64 build_stack_5 = 11;
//    fixed64 build_stack_6 = 12;
//
//    int32 build_stack_0_num_hidden = 13;
//    int32 build_stack_1_num_hidden = 14;
//    int32 build_stack_2_num_hidden = 15;
//    int32 build_stack_3_num_hidden = 16;
//    int32 build_stack_4_num_hidden = 17;
//    int32 build_stack_5_num_hidden = 18;
//    int32 build_stack_6_num_hidden = 19;
}

message HiddenGameState {
    repeated HiddenStack stack = 1;
    message HiddenStack {
        repeated Card cards = 1;
    }
}

enum ActionType {
    UNKNWON_ACTION = 0;

    // Expect ony suit as additional param
    TO_SUIT_STACK = 1;

    // Expect suit and dest build stack num as params
    TALON_TO_BUILD_STACK_NUM = 2;

    // Expect suit and dest build stack num as parms
    SUIT_STACK_TO_BUILD_STACK_NUM = 3;

    // Expect src and dest build stack num as parms
    BUILD_STACK_NUM_TO_BUILD_STACK_NUM = 4;
}

message Action {
    ActionType type = 1;

    Suit suit = 2;
    int32 build_stack_src = 3;
    int32 build_stack_dest = 4;
}

